const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const path = require('path');
const fs = require('fs');

class DialogueSystem {
    constructor(client) {
        this.client = client;
        this.dialogues = new Map();
        this.loadDialogues();
    }

    loadDialogues() {
        try {
            // Di√°logo de bienvenida del Sabio
            this.dialogues.set('welcome', {
                id: 'welcome',
                title: 'üåü ¬°Bienvenido a PassQuirk RPG! üåü',
                description: '¬°Saludos, joven aventurero! Soy El Sabio, tu gu√≠a en este mundo lleno de misterios y aventuras.\n\nJuntos aprender√°s todo lo necesario para convertirte en un h√©roe legendario.',
                image: 'tutorial_sabio.png',
                buttons: [
                    { id: 'start_tutorial', label: '¬°Empecemos!', emoji: '‚ñ∂Ô∏è', style: 'Primary' }
                ]
            });

            // Di√°logo de combate b√°sico
            this.dialogues.set('combat_intro', {
                id: 'combat_intro',
                title: '‚öîÔ∏è ¬°Un enemigo aparece! ‚öîÔ∏è',
                description: '¬°Cuidado! Un Slime salvaje te ha encontrado.\n\nLos combates en PassQuirk son por turnos. Debes elegir sabiamente tus acciones para salir victorioso.',
                image: 'slime_tutorial.png',
                buttons: [
                    { id: 'attack', label: 'Atacar', emoji: '‚öîÔ∏è', style: 'Danger' },
                    { id: 'ability', label: 'Habilidad', emoji: '‚ú®', style: 'Primary' },
                    { id: 'item', label: 'Objeto', emoji: 'üéí', style: 'Secondary' },
                    { id: 'flee', label: 'Huir', emoji: 'üèÉ‚Äç‚ôÇÔ∏è', style: 'Secondary' }
                ]
            });

            // Agregar m√°s di√°logos seg√∫n sea necesario

        } catch (error) {
            console.error('Error al cargar los di√°logos:', error);
        }
    }

    async showDialogue(interaction, dialogueId = 'welcome') {
        const dialogue = this.dialogues.get(dialogueId);
        if (!dialogue) return null;

        const embed = new EmbedBuilder()
            .setTitle(dialogue.title)
            .setDescription(dialogue.description)
            .setColor('#6C63FF')
            .setImage(`attachment://${dialogue.image}`);

        const row = new ActionRowBuilder();
        
        dialogue.buttons.forEach(btn => {
            row.addComponents(
                new ButtonBuilder()
                    .setCustomId(`dialogue_${dialogue.id}_${btn.id}`)
                    .setLabel(btn.label)
                    .setEmoji(btn.emoji)
                    .setStyle(ButtonStyle[btn.style] || ButtonStyle.Primary)
            );
        });

        // Obtener la ruta de la imagen
        const imagePath = path.join(__dirname, '..', 'assets', 'images', 'npcs', dialogue.image);
        
        return { 
            embeds: [embed], 
            components: [row],
            files: [{
                attachment: imagePath,
                name: dialogue.image
            }]
        };
    }

    handleButton(interaction) {
        const [_, dialogueId, action] = interaction.customId.split('_');
        
        switch (action) {
            case 'start':
                return this.showDialogue(interaction, 'combat_intro');
            // Agregar m√°s casos para otras acciones
            default:
                return null;
        }
    }
}

module.exports = DialogueSystem;
