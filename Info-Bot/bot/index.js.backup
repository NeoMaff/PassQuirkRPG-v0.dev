require('dotenv').config();
const { Client, GatewayIntentBits, Collection } = require('discord.js');
const { REST } = require('@discordjs/rest');
const { Routes } = require('discord-api-types/v9');
const fs = require('fs');
const path = require('path');

// Inicializar el cliente de Discord
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildVoiceStates,
    ],
});

// Colecciones para comandos y eventos
client.commands = new Collection();
client.events = new Collection();
client.buttons = new Collection();
client.selectMenus = new Collection();

// Cargar comandos
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
    const filePath = path.join(commandsPath, file);
    const command = require(filePath);
    client.commands.set(command.data.name, command);
}

// Cargar eventos
const eventsPath = path.join(__dirname, 'events');
const eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith('.js'));

for (const file of eventFiles) {
    const filePath = path.join(eventsPath, file);
    const event = require(filePath);
    if (event.once) {
        client.once(event.name, (...args) => event.execute(...args, client));
    } else {
        client.on(event.name, (...args) => event.execute(...args, client));
    }
}

// Iniciar el bot
(async () => {
    try {
        // Cargar comandos
        const commands = [];
        const commandFiles = fs.readdirSync(path.join(__dirname, 'commands')).filter(file => file.endsWith('.js'));

        for (const file of commandFiles) {
            try {
                const command = require(`./commands/${file}`);
                commands.push(command.data.toJSON());
                client.commands.set(command.data.name, command);
                console.log(`âœ… Comando cargado: ${command.data.name}`);
            } catch (error) {
                console.error(`Error al cargar el comando ${file}:`, error);
            }
        }

        // Iniciar el bot
        console.log('ðŸ”‘ Iniciando sesiÃ³n con el token');
        await client.login(process.env.DISCORD_TOKEN);
        
        // Manejar errores no capturados
        process.on('unhandledRejection', error => {
            console.error('Error no capturado (unhandledRejection):', error);
        });
        
        process.on('uncaughtException', error => {
            console.error('ExcepciÃ³n no capturada (uncaughtException):', error);
        });
        console.log(`âœ… ${client.user.tag} estÃ¡ en lÃ­nea.`);

        // Registrar comandos
        console.log('ðŸ”„ Actualizando comandos de aplicaciÃ³n...');
        const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);
        
        try {
            await rest.put(
                Routes.applicationCommands(process.env.CLIENT_ID),
                { body: commands },
            );
            console.log(`âœ… Comandos de aplicaciÃ³n (/) actualizados (${commands.length} comandos).`);
        } catch (error) {
            console.error('Error al actualizar comandos:', error);
        }
    } catch (error) {
        console.error('Error al iniciar el bot:', error);
        process.exit(1);
    }
})();

// Manejo de errores
process.on('unhandledRejection', error => {
    console.error('Unhandled promise rejection:', error);
});

process.on('uncaughtException', error => {
    console.error('Uncaught exception:', error);
});

module.exports = client;
